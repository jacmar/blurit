<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#4285f4">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>Selective Focus</title>
    <link rel="manifest" href="manifest.json">
    <link rel="apple-touch-icon" href="icons/icon-192x192.png">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4285f4;
            --primary-dark: #3367d6;
            --text-color: #333;
            --light-grey: #f5f5f5;
            --border-color: #ddd;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            -webkit-tap-highlight-color: transparent;
        }
        
        body {
            font-family: 'Roboto', sans-serif;
            color: var(--text-color);
            background-color: var(--light-grey);
            line-height: 1.6;
            padding-bottom: env(safe-area-inset-bottom);
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 10;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding-top: env(safe-area-inset-top);
        }
        
        h1 {
            font-size: 1.5rem;
            font-weight: 500;
        }
        
        main {
            max-width: 800px;
            margin: 0 auto;
            padding: 1rem;
        }
        
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .card-title {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            font-weight: 500;
        }
        
        .upload-container {
            border: 2px dashed var(--border-color);
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            border-radius: 6px;
            margin-bottom: 1rem;
            transition: all 0.3s;
        }
        
        .upload-container:hover {
            background-color: rgba(66, 133, 244, 0.04);
        }
        
        .upload-container p {
            color: #666;
            margin-top: 0.5rem;
        }
        
        .hidden {
            display: none !important;
        }
        
        #fileInput {
            display: none;
        }
        
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.25rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: background-color 0.3s;
            -webkit-appearance: none;
            width: 100%;
            margin-top: 1rem;
        }
        
        button:hover {
            background-color: var(--primary-dark);
        }
        
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        
        select, input[type="number"] {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 1rem;
            background-color: white;
            -webkit-appearance: none;
        }

        /* Stile personalizzato per gli slider */
        input[type="range"] {
            -webkit-appearance: none;
            width: 100%;
            height: 8px;
            border-radius: 4px;
            background: #d3d3d3;
            outline: none;
            margin-bottom: 1rem;
        }
        
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
        }
        
        .slider-value {
            display: inline-block;
            width: 40px;
            text-align: center;
            margin-left: 8px;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .parameter-group {
            margin-bottom: 1rem;
        }
        
        .processing {
            text-align: center;
            padding: 2rem;
        }
        
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid var(--primary-color);
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 1rem auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Griglia di immagini */
        #previewGrid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 10px;
            margin: 1rem 0;
        }
        
        .preview-item {
            position: relative;
            border-radius: 6px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .preview-item img {
            width: 100%;
            height: auto;
            display: block;
        }
        
        /* Griglia di risultati */
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 12px;
            margin-top: 1rem;
        }
        
        .result-item {
            border-radius: 6px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            background: white;
        }
        
        .result-item img {
            width: 100%;
            display: block;
        }
        
        .result-actions {
            display: flex;
            padding: 8px;
        }
        
        .result-actions button {
            flex: 1;
            padding: 6px 8px;
            font-size: 0.8rem;
            margin-top: 0;
        }
        
        /* Fix per iOS */
        @supports (-webkit-touch-callout: none) {
            input, select, button {
                font-size: 16px; /* Previene lo zoom su iOS */
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>SELECTIVE FOCUS</h1>
    </header>
    
    <main>
        <div class="card" id="uploadCard">
            <h2 class="card-title">Seleziona Immagini</h2>
            <div class="upload-container" id="dropZone">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#4285f4" stroke-width="2">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="17 8 12 3 7 8"></polyline>
                    <line x1="12" y1="3" x2="12" y2="15"></line>
                </svg>
                <p>Tocca per selezionare immagini dalla galleria</p>
            </div>
            <input type="file" id="fileInput" accept="image/*" multiple>
            
            <div id="selectedImagesContainer" class="hidden">
                <h3 class="card-title">Immagini Selezionate</h3>
                <div id="previewGrid"></div>
                <div id="imageCounter"></div>
                <button id="proceedButton">Procedi con Elaborazione</button>
            </div>
        </div>
        
        <div class="card hidden" id="optionsCard">
            <h2 class="card-title">Parametri di Elaborazione</h2>
            
            <div class="parameter-group">
                <label for="modeSelect">Modalità di Elaborazione:</label>
                <select id="modeSelect">
                    <option value="standard">Standard - Effetto centrale</option>
                    <option value="radial">Radiale - Sfocatura graduale dal centro</option>
                    <option value="side">Laterale - Focus su un lato</option>
                    <option value="tilt">Tilt-Shift - Effetto miniatura</option>
                </select>
            </div>
            
            <div class="parameter-group">
                <label for="focusStrength">Intensità Effetto (0.1-1.0):</label>
                <div style="display: flex; align-items: center;">
                    <input type="range" id="focusStrength" min="0.1" max="1.0" step="0.05" value="0.7">
                    <span id="focusStrengthValue" class="slider-value">0.7</span>
                </div>
            </div>
            
            <div class="parameter-group">
                <label for="blurRadius">Raggio Sfocatura (1-20):</label>
                <div style="display: flex; align-items: center;">
                    <input type="range" id="blurRadius" min="1" max="20" step="1" value="10">
                    <span id="blurRadiusValue" class="slider-value">10</span>
                </div>
            </div>
            
            <button id="processButton">Elabora Immagini</button>
        </div>
        
        <div class="card hidden" id="processingCard">
            <div class="processing">
                <h2 class="card-title">Elaborazione in corso...</h2>
                <div class="spinner"></div>
                <p id="processingStatus">Elaborazione immagine 1 di 1</p>
            </div>
        </div>
        
        <div class="card hidden" id="resultsCard">
            <h2 class="card-title">Risultati</h2>
            
            <div id="resultsContainer" class="results-grid"></div>
            
            <button id="saveAllButton" style="margin-top: 1rem;">Salva Tutte</button>
            <button id="newImagesButton" style="margin-top: 0.5rem;">Elabora Nuove Immagini</button>
        </div>
    </main>
    
    <script>
        // Registro Service Worker per PWA
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(reg => console.log('Service Worker registrato'))
                    .catch(err => console.log('Errore registrazione Service Worker:', err));
            });
        }
        
        // Elementi DOM
        const fileInput = document.getElementById('fileInput');
        const dropZone = document.getElementById('dropZone');
        const selectedImagesContainer = document.getElementById('selectedImagesContainer');
        const previewGrid = document.getElementById('previewGrid');
        const imageCounter = document.getElementById('imageCounter');
        const proceedButton = document.getElementById('proceedButton');
        
        const uploadCard = document.getElementById('uploadCard');
        const optionsCard = document.getElementById('optionsCard');
        const processingCard = document.getElementById('processingCard');
        const resultsCard = document.getElementById('resultsCard');
        
        const modeSelect = document.getElementById('modeSelect');
        const focusStrength = document.getElementById('focusStrength');
        const focusStrengthValue = document.getElementById('focusStrengthValue');
        const blurRadius = document.getElementById('blurRadius');
        const blurRadiusValue = document.getElementById('blurRadiusValue');
        
        const processButton = document.getElementById('processButton');
        const processingStatus = document.getElementById('processingStatus');
        const resultsContainer = document.getElementById('resultsContainer');
        const saveAllButton = document.getElementById('saveAllButton');
        const newImagesButton = document.getElementById('newImagesButton');
        
        // Variabili globali
        let selectedImages = [];
        let processedImages = [];
        
        // Gestione slider
        focusStrength.addEventListener('input', () => {
            focusStrengthValue.textContent = parseFloat(focusStrength.value).toFixed(2);
        });
        
        blurRadius.addEventListener('input', () => {
            blurRadiusValue.textContent = blurRadius.value;
        });
        
        // Selezione immagini
        dropZone.addEventListener('click', () => {
            fileInput.click();
        });
        
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                selectedImages = Array.from(e.target.files);
                updatePreviewGrid();
            }
        });
        
        // Aggiorna la griglia di anteprima
        function updatePreviewGrid() {
            previewGrid.innerHTML = '';
            
            selectedImages.forEach(file => {
                if (!file.type.match('image.*')) return;
                
                const reader = new FileReader();
                reader.onload = (event) => {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'preview-item';
                    
                    const img = document.createElement('img');
                    img.src = event.target.result;
                    img.alt = file.name;
                    
                    previewItem.appendChild(img);
                    previewGrid.appendChild(previewItem);
                };
                
                reader.readAsDataURL(file);
            });
            
            if (selectedImages.length > 0) {
                imageCounter.textContent = `${selectedImages.length} immagini selezionate`;
                selectedImagesContainer.classList.remove('hidden');
            } else {
                selectedImagesContainer.classList.add('hidden');
            }
        }
        
        // Procedi con l'elaborazione
        proceedButton.addEventListener('click', () => {
            if (selectedImages.length === 0) {
                alert('Seleziona almeno un\'immagine');
                return;
            }
            
            uploadCard.classList.add('hidden');
            optionsCard.classList.remove('hidden');
        });
        
        // Elabora immagini
        processButton.addEventListener('click', async () => {
            if (selectedImages.length === 0) {
                alert('Seleziona almeno un\'immagine');
                return;
            }
            
            // Mostra schermata di elaborazione
            optionsCard.classList.add('hidden');
            processingCard.classList.remove('hidden');
            
            // Prepara parametri
            const mode = modeSelect.value;
            const strength = parseFloat(focusStrength.value);
            const radius = parseInt(blurRadius.value);
            
            // Reset risultati
            processedImages = [];
            
            // Elabora ogni immagine
            for (let i = 0; i < selectedImages.length; i++) {
                const file = selectedImages[i];
                processingStatus.textContent = `Elaborazione immagine ${i+1} di ${selectedImages.length}`;
                
                // Carica immagine
                const imageElement = await loadImageFromFile(file);
                
                // Elabora immagine
                const processedCanvas = await processImage(imageElement, mode, strength, radius);
                
                // Aggiungi ai risultati
                processedImages.push({
                    originalName: file.name,
                    canvas: processedCanvas
                });
                
                // Piccola pausa per permettere aggiornamento UI
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            
            // Mostra risultati
            displayResults();
        });
        
        // Carica immagine da file
        function loadImageFromFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const img = new Image();
                    img.onload = () => resolve(img);
                    img.onerror = reject;
                    img.src = event.target.result;
                };
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }
        
        // Elabora immagine con effetto selective focus
        function processImage(img, mode, strength, radius) {
            return new Promise((resolve) => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Imposta dimensioni canvas (massimo 1200px per lato per performance)
                const maxDimension = 1200;
                let width = img.width;
                let height = img.height;
                
                if (width > maxDimension || height > maxDimension) {
                    if (width > height) {
                        height = Math.round(height * (maxDimension / width));
                        width = maxDimension;
                    } else {
                        width = Math.round(width * (maxDimension / height));
                        height = maxDimension;
                    }
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // Disegna immagine originale
                ctx.drawImage(img, 0, 0, width, height);
                
                // Applica effetto in base alla modalità
                if (mode === 'standard') {
                    applyStandardEffect(ctx, width, height, strength, radius);
                } else if (mode === 'radial') {
                    applyRadialEffect(ctx, width, height, strength, radius);
                } else if (mode === 'side') {
                    applySideEffect(ctx, width, height, strength, radius);
                } else if (mode === 'tilt') {
                    applyTiltShiftEffect(ctx, width, height, strength, radius);
                }
                
                resolve(canvas);
            });
        }
        
        // Modalità Standard - Focus al centro
        function applyStandardEffect(ctx, width, height, strength, radius) {
            // Copia dell'immagine originale
            const originalData = ctx.getImageData(0, 0, width, height);
            // Crea versione sfocata di tutta l'immagine
            const blurredCanvas = document.createElement('canvas');
            blurredCanvas.width = width;
            blurredCanvas.height = height;
            const blurCtx = blurredCanvas.getContext('2d');
            blurCtx.drawImage(ctx.canvas, 0, 0);
            stackBlur(blurCtx, 0, 0, width, height, radius);
            
            // Centro dell'immagine
            const centerX = width / 2;
            const centerY = height / 2;
            // Raggio dell'area a fuoco (50% della dimensione minore con regolazione in base alla forza)
            const focusRadius = Math.min(width, height) * 0.3 * (1 - (strength * 0.5));
            
            // Mescola immagine originale e sfocata in base alla distanza dal centro
            const blendedData = blurCtx.getImageData(0, 0, width, height);
            const originalPixels = originalData.data;
            const blendedPixels = blendedData.data;
            
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const idx = (y * width + x) * 4;
                    
                    // Calcola distanza dal centro
                    const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));
                    
                    // Calcola fattore di mescolamento (0 = originale, 1 = sfocato)
                    let blendFactor = 0;
                    
                    if (distance > focusRadius) {
                        // Transizione graduale oltre il raggio di focus
                        blendFactor = Math.min(1, (distance - focusRadius) / (focusRadius * 1.5));
                    }
                    
                    // Aumenta il fattore di blend in base all'intensità
                    blendFactor = Math.min(1, blendFactor * strength * 2);
                    
                    // Applica il mescolamento
                    if (blendFactor > 0) {
                        blendedPixels[idx] = originalPixels[idx] * (1 - blendFactor) + blendedPixels[idx] * blendFactor;
                        blendedPixels[idx + 1] = originalPixels[idx + 1] * (1 - blendFactor) + blendedPixels[idx + 1] * blendFactor;
                        blendedPixels[idx + 2] = originalPixels[idx + 2] * (1 - blendFactor) + blendedPixels[idx + 2] * blendFactor;
                    }
                }
            }
            
            ctx.putImageData(blendedData, 0, 0);
        }
        
        // Modalità Radiale - Sfocatura graduale dal centro
        function applyRadialEffect(ctx, width, height, strength, radius) {
            // Copia dell'immagine originale
            const originalData = ctx.getImageData(0, 0, width, height);
            // Crea versione sfocata di tutta l'immagine
            const blurredCanvas = document.createElement('canvas');
            blurredCanvas.width = width;
            blurredCanvas.height = height;
            const blurCtx = blurredCanvas.getContext('2d');
            blurCtx.drawImage(ctx.canvas, 0, 0);
            stackBlur(blurCtx, 0, 0, width, height, radius);
            
            // Centro dell'immagine
            const centerX = width / 2;
            const centerY = height / 2;
            // Distanza massima dal centro (diagonale)
            const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);
            
            // Mescola immagine originale e sfocata in base alla distanza dal centro
            const blendedData = ctx.getImageData(0, 0, width, height);
            const originalPixels = originalData.data;
            const blurredPixels = blurCtx.getImageData(0, 0, width, height).data;
            
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const idx = (y * width + x) * 4;
                    
                    // Calcola distanza normalizzata dal centro (0 = centro, 1 = angolo più lontano)
                    const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)) / maxDistance;
                    
                    // Inverti il fattore di mescolamento per avere il centro a fuoco
                    let blendFactor = distance * strength * 1.5;
                    blendFactor = Math.min(1, blendFactor);
                    
                    // Applica il mescolamento
                    blendedData.data[idx] = originalPixels[idx] * (1 - blendFactor) + blurredPixels[idx] * blendFactor;
                    blendedData.data[idx + 1] = originalPixels[idx + 1] * (1 - blendFactor) + blurredPixels[idx + 1] * blendFactor;
                    blendedData.data[idx + 2] = originalPixels[idx + 2] * (1 - blendFactor) + blurredPixels[idx + 2] * blendFactor;
                }
            }
            
            ctx.putImageData(blendedData, 0, 0);
        }
        
        // Modalità Side - Focus su un lato
        function applySideEffect(ctx, width, height, strength, radius) {
            // Copia dell'immagine originale
            const originalData = ctx.getImageData(0, 0, width, height);
            // Crea versione sfocata di tutta l'immagine
            const blurredCanvas = document.createElement('canvas');
            blurredCanvas.width = width;
            blurredCanvas.height = height;
            const blurCtx = blurredCanvas.getContext('2d');
            blurCtx.drawImage(ctx.canvas, 0, 0);
            stackBlur(blurCtx, 0, 0, width, height, radius);
            
            const blendedData = ctx.getImageData(0, 0, width, height);
            const originalPixels = originalData.data;
            const blurredPixels = blurCtx.getImageData(0, 0, width, height).data;
            
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const idx = (y * width + x) * 4;
                    
                    // Fattore di mescolamento basato sulla posizione orizzontale
                    let blendFactor = x / width;
                    
                    // Aumenta il contrasto dell'effetto con l'intensità
                    blendFactor = Math.pow(blendFactor, 0.5 + strength);
                    blendFactor = Math.min(1, blendFactor * strength * 2);
                    
                    // Applica il mescolamento
                    blendedData.data[idx] = originalPixels[idx] * (1 - blendFactor) + blurredPixels[idx] * blendFactor;
                    blendedData.data[idx + 1] = originalPixels[idx + 1] * (1 - blendFactor) + blurredPixels[idx + 1] * blendFactor;
                    blendedData.data[idx + 2] = originalPixels[idx + 2] * (1 - blendFactor) + blurredPixels[idx + 2] * blendFactor;
                }
            }
            
            ctx.putImageData(blendedData, 0, 0);
        }
        
        // Modalità Tilt-Shift - Effetto miniatura
        function applyTiltShiftEffect(ctx, width, height, strength, radius) {
            // Copia dell'immagine originale
            const originalData = ctx.getImageData(0, 0, width, height);
            // Crea versione sfocata di tutta l'immagine
            const blurredCanvas = document.createElement('canvas');
            blurredCanvas.width = width;
            blurredCanvas.height = height;
            const blurCtx = blurredCanvas.getContext('2d');
            blurCtx.drawImage(ctx.canvas, 0, 0);
            stackBlur(blurCtx, 0, 0, width, height, radius);
            
            // Linea centrale orizzontale (in verticale) a fuoco
            const focusY = height * 0.5;
            // Larghezza della fascia a fuoco
            const focusWidth = height * 0.2 * (1 - strength * 0.5);
            
            const blendedData = ctx.getImageData(0, 0, width, height);
            const originalPixels = originalData.data;
            const blurredPixels = blurCtx.getImageData(0, 0, width, height).data;
            
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const idx = (y * width + x) * 4;
                    
                    // Calcola distanza dalla linea centrale
                    const distance = Math.abs(y - focusY);
                    
                    // Calcola fattore di mescolamento
                    let blendFactor = 0;
                    if (distance > focusWidth) {
                        blendFactor = Math.min(1, (distance - focusWidth) / (focusWidth * 2) * strength * 2);
                    }
                    
                    // Applica il mescolamento
                    blendedData.data[idx] = originalPixels[idx] * (1 - blendFactor) + blurredPixels[idx] * blendFactor;
                    blendedData.data[idx + 1] = originalPixels[idx + 1] * (1 - blendFactor) + blurredPixels[idx + 1] * blendFactor;
                    blendedData.data[idx + 2] = originalPixels[idx + 2] * (1 - blendFactor) + blurredPixels[idx + 2] * blendFactor;
                }
            }
            
            ctx.putImageData(blendedData, 0, 0);
        }
        
        // Stack Blur - Algoritmo di blur efficiente
        // Adattato da http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html
        function stackBlur(ctx, x, y, width, height, radius) {
            if (radius < 1) return;
            
            const imageData = ctx.getImageData(x, y, width, height);
            const pixels = imageData.data;
            
            let r, g, b, a;
            let rsum, gsum, bsum, asum;
            let rOutSum, gOutSum, bOutSum, aOutSum;
            let rInSum, gInSum, bInSum, aInSum;
            let p, yi, yp, stackStart;
            
            const div = radius + radius + 1;
            const widthMinus1 = width - 1;
            const heightMinus1 = height - 1;
            const radiusPlus1 = radius + 1;
            const sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
            
            const stackStart = new BlurStack();
            let stack = stackStart;
            for (let i = 1; i < div; i++) {
                stack = stack.next = new BlurStack();
                if (i === radiusPlus1) var stackEnd = stack;
            }
            stack.next = stackStart;
            let stackIn = null;
            let stackOut = null;
            
            yw = yi = 0;
            
            const mulSum = mulTable[radius];
            const shgSum = shgTable[radius];
            
            for (let y = 0; y < height; y++) {
                rInSum = gInSum = bInSum = aInSum = rSum = gSum = bSum = aSum = 0;
                
                rOutSum = radiusPlus1 * (r = pixels[yi]);
                gOutSum = radiusPlus1 * (g = pixels[yi + 1]);
                bOutSum = radiusPlus1 * (b = pixels[yi + 2]);
                aOutSum = radiusPlus1 * (a = pixels[yi + 3]);
                
                rSum += sumFactor * r;
                gSum += sumFactor * g;
                bSum += sumFactor * b;
                aSum += sumFactor * a;
                
                stack = stackStart;
                
                for (let i = 0; i < radiusPlus1; i++) {
                    stack.r = r;
                    stack.g = g;
                    stack.b = b;
                    stack.a = a;
                    stack = stack.next;
                }
                
                for (let i = 1; i < radiusPlus1; i++) {
                    p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
                    rSum += (stack.r = (r = pixels[p])) * (radiusPlus1 - i);
                    gSum += (stack.g = (g = pixels[p + 1])) * (radiusPlus1 - i);
                    bSum += (stack.b = (b = pixels[p + 2])) * (radiusPlus1 - i);
                    aSum += (stack.a = (a = pixels[p + 3])) * (radiusPlus1 - i);
                    
                    rInSum += r;
                    gInSum += g;
                    bInSum += b;
                    aInSum += a;
                    
                    stack = stack.next;
                }
                
                stackIn = stackStart;
                stackOut = stackEnd;
                for (let x = 0; x < width; x++) {
                    pixels[yi + 3] = a = (aSum * mulSum) >> shgSum;
                    if (a !== 0) {
                        a = 255 / a;
                        pixels[yi] = ((rSum * mulSum) >> shgSum) * a;
                        pixels[yi + 1] = ((gSum * mulSum) >> shgSum) * a;
                        pixels[yi + 2] = ((bSum * mulSum) >> shgSum) * a;
                    } else {
                        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
                    }
                    
                    rSum -= rOutSum;
                    gSum -= gOutSum;
                    bSum -= bOutSum;
                    aSum -= aOutSum;
                    
                    rOutSum -= stackIn.r;
                    gOutSum -= stackIn.g;
                    bOutSum -= stackIn.b;
                    aOutSum -= stackIn.a;
                    
                    p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
                    
                    rInSum += (stackIn.r = pixels[p]);
                    gInSum += (stackIn.g = pixels[p + 1]);
                    bInSum += (stackIn.b = pixels[p + 2]);
                    aInSum += (stackIn.a = pixels[p + 3]);
                    
                    rSum += rInSum;
                    gSum += gInSum;
                    bSum += bInSum;
                    aSum += aInSum;
                    
                    stackIn = stackIn.next;
                    
                    rOutSum += (r = stackOut.r);
                    gOutSum += (g = stackOut.g);
                    bOutSum += (b = stackOut.b);
                    aOutSum += (a = stackOut.a);
                    
                    rInSum -= r;
                    gInSum -= g;
                    bInSum -= b;
                    aInSum -= a;
                    
                    stackOut = stackOut.next;
                    
                    yi += 4;
                }
                yw += width;
            }
            
            for (let x = 0; x < width; x++) {
                gInSum = bInSum = aInSum = rInSum = gSum = bSum = aSum = rSum = 0;
                
                yi = x << 2;
                rOutSum = radiusPlus1 * (r = pixels[yi]);
                gOutSum = radiusPlus1 * (g = pixels[yi + 1]);
                bOutSum = radiusPlus1 * (b = pixels[yi + 2]);
                aOutSum = radiusPlus1 * (a = pixels[yi + 3]);
                
                rSum += sumFactor * r;
                gSum += sumFactor * g;
                bSum += sumFactor * b;
                aSum += sumFactor * a;
                
                stack = stackStart;
                
                for (let i = 0; i < radiusPlus1; i++) {
                    stack.r = r;
                    stack.g = g;
                    stack.b = b;
                    stack.a = a;
                    stack = stack.next;
                }
                
                yp = width;
                
                for (let i = 1; i <= radius; i++) {
                    yi = (yp + x) << 2;
                    
                    rSum += (stack.r = (r = pixels[yi])) * (radiusPlus1 - i);
                    gSum += (stack.g = (g = pixels[yi + 1])) * (radiusPlus1 - i);
                    bSum += (stack.b = (b = pixels[yi + 2])) * (radiusPlus1 - i);
                    aSum += (stack.a = (a = pixels[yi + 3])) * (radiusPlus1 - i);
                    
                    rInSum += r;
                    gInSum += g;
                    bInSum += b;
                    aInSum += a;
                    
                    stack = stack.next;
                    
                    if (i < heightMinus1) {
                        yp += width;
                    }
                }
                
                yi = x;
                stackIn = stackStart;
                stackOut = stackEnd;
                for (let y = 0; y < height; y++) {
                    p = yi << 2;
                    pixels[p + 3] = a = (aSum * mulSum) >> shgSum;
                    if (a > 0) {
                        a = 255 / a;
                        pixels[p] = ((rSum * mulSum) >> shgSum) * a;
                        pixels[p + 1] = ((gSum * mulSum) >> shgSum) * a;
                        pixels[p + 2] = ((bSum * mulSum) >> shgSum) * a;
                    } else {
                        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
                    }
                    
                    rSum -= rOutSum;
                    gSum -= gOutSum;
                    bSum -= bOutSum;
                    aSum -= aOutSum;
                    
                    rOutSum -= stackIn.r;
                    gOutSum -= stackIn.g;
                    bOutSum -= stackIn.b;
                    aOutSum -= stackIn.a;
                    
                    p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;
                    
                    rSum += (rInSum += (stackIn.r = pixels[p]));
                    gSum += (gInSum += (stackIn.g = pixels[p + 1]));
                    bSum += (bInSum += (stackIn.b = pixels[p + 2]));
                    aSum += (aInSum += (stackIn.a = pixels[p + 3]));
                    
                    stackIn = stackIn.next;
                    
                    rOutSum += (r = stackOut.r);
                    gOutSum += (g = stackOut.g);
                    bOutSum += (b = stackOut.b);
                    aOutSum += (a = stackOut.a);
                    
                    rInSum -= r;
                    gInSum -= g;
                    bInSum -= b;
                    aInSum -= a;
                    
                    stackOut = stackOut.next;
                    
                    yi += width;
                }
            }
            
            ctx.putImageData(imageData, x, y);
        }
        
        // Lookup tables per ottimizzazione Stack Blur
        const mulTable = [
            1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137,
            241, 107, 3, 173, 39, 71, 65, 238, 219, 101, 187, 87, 81, 151, 141, 133
        ];
        
        const shgTable = [
            0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17,
            18, 17, 12, 18, 16, 17, 17, 19, 19, 18, 19, 18, 18, 19, 19, 19
        ];
        
        function BlurStack() {
            this.r = 0;
            this.g = 0;
            this.b = 0;
            this.a = 0;
            this.next = null;
        }
        
        // Visualizza risultati
        function displayResults() {
            // Nascondi schermata di elaborazione
            processingCard.classList.add('hidden');
            resultsCard.classList.remove('hidden');
            
            // Pulisci il container dei risultati
            resultsContainer.innerHTML = '';
            
            // Aggiungi ogni immagine elaborata
            processedImages.forEach((item, index) => {
                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                
                // Immagine
                const img = document.createElement('img');
                img.src = item.canvas.toDataURL('image/jpeg', 0.92);
                img.alt = `Risultato ${index + 1}`;
                
                // Azioni
                const actions = document.createElement('div');
                actions.className = 'result-actions';
                
                const saveBtn = document.createElement('button');
                saveBtn.textContent = 'Salva';
                saveBtn.addEventListener('click', () => {
                    saveImage(item.canvas, `selective-focus-${item.originalName}`);
                });
                
                actions.appendChild(saveBtn);
                resultItem.appendChild(img);
                resultItem.appendChild(actions);
                resultsContainer.appendChild(resultItem);
            });
        }
        
        // Salva immagine nella galleria o come download
        function saveImage(canvas, filename) {
            const dataUrl = canvas.toDataURL('image/jpeg', 0.92);
            
            // Crea link per download
            const link = document.createElement('a');
            link.href = dataUrl;
            link.download = filename;
            
            // Per iOS Safari, apri in nuova scheda (l'utente può salvare manualmente)
            if (navigator.userAgent.match(/iP(hone|od|ad)/i)) {
                alert('Immagine pronta per il download. Tocca e tieni premuto sull\'immagine, poi scegli "Salva immagine".');
                window.open(dataUrl);
            } else {
                // Altre piattaforme: download diretto
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
        
        // Salva tutte le immagini
        saveAllButton.addEventListener('click', () => {
            alert('Tocca ogni immagine che desideri salvare');
            processedImages.forEach((item, index) => {
                setTimeout(() => {
                    saveImage(item.canvas, `selective-focus-${item.originalName}`);
                }, index * 500); // Piccolo ritardo tra i download
            });
        });
        
        // Inizia nuova elaborazione
        newImagesButton.addEventListener('click', () => {
            // Reset
            resultsCard.classList.add('hidden');
            uploadCard.classList.remove('hidden');
            fileInput.value = '';
            selectedImages = [];
            processedImages = [];
            updatePreviewGrid();
        });
    </script>
</body>
</html>